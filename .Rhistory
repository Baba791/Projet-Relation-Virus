for (FamCourant in V(residGraph2)$famille) {
V(residGraph2)[V(residGraph2)$famille==FamCourant]$color <- matriceDeCouleur[,FamCourant]
}
set.seed(1)
{plot(residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.shapes=V(residGraph2)$shape,
vertex.color=V(residGraph2)$color,
main = "Répartition des virus selon leur appartenance aux Familles des hôtes")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
components(residGraph2)
CL <- cluster_louvain(residGraph2)
set.seed(1)
{plot(CL, residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.color=V(residGraph2)$color,
main = "Répartition des communautés de virus selon l'algorithme de Louvain")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
ceb <- cluster_edge_betweenness(residGraph2, directed = F)
set.seed(1)
{plot(ceb, residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.color=V(residGraph2)$color,
main = "Répartition des communautés de virus selon l'algorithme de N-G")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
#nombre de communautés détectées par les deux algorithmes
length(CL)
length(ceb)
#taille de ces communautés
sizes(CL)
sizes(ceb)
modularity(CL)
modularity(ceb)
#chevauchement de ces communautés
compare(comm1 = CL, comm2 = ceb)
set.seed(1)
{plot(CL, residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.color=membership(CL),
main = "Représentaion du réseau de Famille des hôtes")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
knitr::opts_chunk$set(eval = T, echo = T, warning = F, message = F, python.reticulate = F)
library(igraph)
library(tidyverse)
library(gridExtra)
library(pander)
library(reticulate)
library(RColorBrewer)
#use_python("python/Scripts/python.exe")
workspace_path <- getwd()
data_path <-  paste(workspace_path, "/", "data/", sep = "")
output_path <-  paste(data_path, "output/", sep = "")
paste(data_path, "refPhages_and_VirSorter.tsv", sep = "") -> virus_list_path
read_tsv(virus_list_path) -> ListeVirus
#dim(ListeVirus)
SegmentVirusRegroupe <-
ListeVirus %>%
filter(grepl("segment", Definition)) %>%
arrange(Name) %>%
group_by(Name) %>%
mutate(
gc=mean(GC),
length=sum(Length),
nb_Prot=sum(nb_prot),
nb_phROGs=sum(nb_PhROGs),
nb_sing=sum(nb_Sing),
nb_paralog=sum(nb_Paralog)
) %>%
distinct(Name, .keep_all = TRUE) %>%
select(
-GC,
-Length,
-nb_prot,
-nb_PhROGs,
-nb_Sing,
-nb_Paralog
) %>%
rename(
GC=gc,
Length=length,
nb_prot=nb_Prot,
nb_PhROGs=nb_phROGs,
nb_Sing=nb_sing,
nb_Paralog=nb_paralog
)
ListeVirus <- ListeVirus %>%
filter(!grepl("segment", Definition)) %>%
bind_rows(SegmentVirusRegroupe)
ListeVirus <- ListeVirus %>%
filter(Length/nb_prot < 10000)
NbInfectionsParGenre <-
ListeVirus %>%
select(Name, genus) %>%
filter(genus %in% c(
"Clostridium",
"Synechococcus",
"Lactococcus",
"Neisseria",
"Enterococcus",
"Streptomyces")
) %>%
distinct(Name, .keep_all = T) %>%
count(genus) %>%
rename(nb_virus=n)
TotalVirus <-
select(NbInfectionsParGenre, nb_virus) %>%
colSums()
ListeVirusFilterGenre <- ListeVirus %>%
filter(genus %in% c(
"Clostridium",
"Synechococcus",
"Lactococcus",
"Neisseria",
"Enterococcus",
"Streptomyces"
)
) #%>% distinct(Name, .keep_all = TRUE)
virusParGenre <- function(data_genre, name_genre) {
data_genre %>%
select(Locus, Name, genus) %>%
filter(genus %in% c(name_genre)) %>%
select(Locus, Name) #%>%
#distinct(Name, .keep_all = T)
}
generateBoxPlot <- function(
data_array,
axis_x,
axis_y,
legend_x,
legend_y,
title,
caption=""
) {
data_array %>%
ggplot(aes(axis_x, axis_y, color=axis_x)) +
geom_boxplot() +
xlab(legend_x) +
ylab(legend_y) +
labs(title, caption) +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
)
#/data_array
}
generateBoxPlot(
ListeVirusFilterGenre,
(ListeVirusFilterGenre$genus),
(ListeVirusFilterGenre$Length),
"Genre",
"Longueur (pb)",
"longueur des génomes viral en pb"
)
generateBoxPlot(
ListeVirusFilterGenre,
(ListeVirusFilterGenre$genus),
(ListeVirusFilterGenre$GC),
"Genre",
"GC %",
"GC % pour chaque groupe"
)
ListeVirus %>%
filter(genus %in% c("Clostridium", "Synechococcus", "Lactococcus", "Neisseria", "Enterococcus", "Streptomyces")) %>%
distinct(Locus, .keep_all = TRUE) -> Genre_Infect
write_tsv(Genre_Infect, "results/Genre_Infect.tsv")
use_python("python/Scripts/python.exe")
knitr::opts_chunk$set(eval = T, echo = T, warning = F, message = F, python.reticulate = F)
library(igraph)
library(tidyverse)
library(gridExtra)
library(pander)
library(reticulate)
library(RColorBrewer)
use_python("python/Scripts/python.exe")
workspace_path <- getwd()
data_path <-  paste(workspace_path, "/", "data/", sep = "")
output_path <-  paste(data_path, "output/", sep = "")
paste(data_path, "refPhages_and_VirSorter.tsv", sep = "") -> virus_list_path
read_tsv(virus_list_path) -> ListeVirus
#dim(ListeVirus)
SegmentVirusRegroupe <-
ListeVirus %>%
filter(grepl("segment", Definition)) %>%
arrange(Name) %>%
group_by(Name) %>%
mutate(
gc=mean(GC),
length=sum(Length),
nb_Prot=sum(nb_prot),
nb_phROGs=sum(nb_PhROGs),
nb_sing=sum(nb_Sing),
nb_paralog=sum(nb_Paralog)
) %>%
distinct(Name, .keep_all = TRUE) %>%
select(
-GC,
-Length,
-nb_prot,
-nb_PhROGs,
-nb_Sing,
-nb_Paralog
) %>%
rename(
GC=gc,
Length=length,
nb_prot=nb_Prot,
nb_PhROGs=nb_phROGs,
nb_Sing=nb_sing,
nb_Paralog=nb_paralog
)
ListeVirus <- ListeVirus %>%
filter(!grepl("segment", Definition)) %>%
bind_rows(SegmentVirusRegroupe)
ListeVirus <- ListeVirus %>%
filter(Length/nb_prot < 10000)
NbInfectionsParGenre <-
ListeVirus %>%
select(Name, genus) %>%
filter(genus %in% c(
"Clostridium",
"Synechococcus",
"Lactococcus",
"Neisseria",
"Enterococcus",
"Streptomyces")
) %>%
distinct(Name, .keep_all = T) %>%
count(genus) %>%
rename(nb_virus=n)
TotalVirus <-
select(NbInfectionsParGenre, nb_virus) %>%
colSums()
ListeVirusFilterGenre <- ListeVirus %>%
filter(genus %in% c(
"Clostridium",
"Synechococcus",
"Lactococcus",
"Neisseria",
"Enterococcus",
"Streptomyces"
)
) #%>% distinct(Name, .keep_all = TRUE)
virusParGenre <- function(data_genre, name_genre) {
data_genre %>%
select(Locus, Name, genus) %>%
filter(genus %in% c(name_genre)) %>%
select(Locus, Name) #%>%
#distinct(Name, .keep_all = T)
}
generateBoxPlot <- function(
data_array,
axis_x,
axis_y,
legend_x,
legend_y,
title,
caption=""
) {
data_array %>%
ggplot(aes(axis_x, axis_y, color=axis_x)) +
geom_boxplot() +
xlab(legend_x) +
ylab(legend_y) +
labs(title, caption) +
theme(
legend.position = "bottom",
plot.title = element_text(hjust = 0.5)
)
#/data_array
}
generateBoxPlot(
ListeVirusFilterGenre,
(ListeVirusFilterGenre$genus),
(ListeVirusFilterGenre$Length),
"Genre",
"Longueur (pb)",
"longueur des génomes viral en pb"
)
generateBoxPlot(
ListeVirusFilterGenre,
(ListeVirusFilterGenre$genus),
(ListeVirusFilterGenre$GC),
"Genre",
"GC %",
"GC % pour chaque groupe"
)
ListeVirus %>%
filter(genus %in% c("Clostridium", "Synechococcus", "Lactococcus", "Neisseria", "Enterococcus", "Streptomyces")) %>%
distinct(Locus, .keep_all = TRUE) -> Genre_Infect
write_tsv(Genre_Infect, "results/Genre_Infect.tsv")
path_results = "results/"
paste(path_results, "Conservation_grp_ortho.tsv", sep = "") -> ConservationOrtho_path
read_tsv(file = ConservationOrtho_path) -> ConservationOrtho
#Changement des valeurs de conservation en % (pour des questions de lisibilité)
ConservationOrtho %>%
mutate(conservation=Conservation*100) %>%
select(-Conservation) -> ConservationOrtho2
ConservationOrtho2 %>%
ggplot(aes(conservation)) +
geom_histogram(aes(fill=Genre)) +
labs(caption = "refPhages_and_VirSorter.tsv",
title="Distribution de la conservation des groupes orthologues au sein des groupes de virus") +
theme(plot.title = element_text(hjust = 0)) +
facet_wrap(~Genre, nrow = 2)
ConservationOrtho2 %>%
ggplot(aes(conservation, colour=Genre)) +
geom_freqpoly()+
labs(title= "Distribution de la conservation des groupes orthologues au sein des groupes de virus") +
theme(plot.title = element_text(hjust = 0))
ListeVirus %>%
filter(family %in% c("Sutterellaceae", "Oxalobacteraceae", "Comamonadaceae", "Alcaligenaceae")) -> Grp_virus
write_tsv(Grp_virus, "results/Grp_virus.tsv")
paste(path_results,"repartition_grps_orthologues.tsv", sep = "") -> residGraph_path
read_tsv(file = residGraph_path) -> residGraph
graph_from_data_frame(residGraph, directed = F) -> residGraph2
#nombre de liens (arètes)
E(residGraph2)
Poids_Liens <- E(residGraph2)$nb_commun
nbLiens = 1152
#pour que mon graph soit pondéré
residGraph$nb_commun -> E(residGraph2)$weight
#E(residGraph2)$weight
residGraph2
#nombre de noeuds (de virus)
V(residGraph2)
V(residGraph2)$name
nbSommets = 70
#nbre de liens possibles
nbLpossibles = nbSommets*(nbSommets+1)/2
nbLpossibles
##parametre gamma : nbre de liens/nbre de liens possibles
Gamma=nbLiens/nbLpossibles
Gamma
#edge_density(residGraph2)
# le diametre = on cherche le plus court chemin pour rejoindre le voisin le plus éloigné
diameter(residGraph2, directed = F)
#print_all(residGraph2)
# le parametre Eta : Longueur moyenne des arcs
mean_distance(residGraph2)
# Transitivité (coefficient de clustering)
transitivity(residGraph2, type = "global")
transitivity(residGraph2, type = "local")
# histogramme du degré des noeuds (le nombres d'arètes qui passent par un noeud)
hist(degree(residGraph2),
main = "Distribution du degré des noeuds")
#Pour plus de précision
degre <- degree(residGraph2)
hist(degre,
breaks = 1:vcount(residGraph2),
main= "Histogramme du degré des noeuds",
xlab= "Degrés",
ylab = "Fréquence")
#le réseau
plot(residGraph2, directed = F)
#même chose en considérant le poids des liens
plot(residGraph2, edge.width= Poids_Liens, directed = F)
summary(residGraph2)
l <- layout_with_fr(residGraph2,
dim=2,
weights = E(residGraph2))
btw <- betweenness(residGraph2,
directed = FALSE)
fine = 500
pal = colorRampPalette(c('white', 'gray33', 'black'))
graphCol = pal(fine)[as.numeric(btw,breaks = fine)]
set.seed(1)
plot(residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.color=graphCol,
vertex.label=NA,
main ="Centralité d'intermédiarité")
#hist(betweenness(residGraph2))
mytriangle <- function(coords, v=NULL, params) {
vertex.color <- params("vertex", "color")
if (length(vertex.color) != 1 && !is.null(v)) {
vertex.color <- vertex.color[v]
}
vertex.size <- 1/200 * params("vertex", "size")
if (length(vertex.size) != 1 && !is.null(v)) {
vertex.size <- vertex.size[v]
}
symbols(x=coords[,1], y=coords[,2], bg=vertex.color,
stars=cbind(vertex.size, vertex.size, vertex.size),
add=TRUE, inches=FALSE)
}
add_shape("triangle", clip=shapes("circle")$clip,
plot=mytriangle)
V(residGraph2)$prophage <- as.character(Grp_virus$prophage[match(V(residGraph2)$name,Grp_virus$Locus)])
V(residGraph2)[V(residGraph2)$prophage=="undef"]$shape <- "triangle"
V(residGraph2)[V(residGraph2)$prophage=="yes"]$shape <- "square"
V(residGraph2)[V(residGraph2)$prophage=="no"]$shape <- "circle"
set.seed(1)
{plot(residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.color=graphCol,
vertex.label="",
vertex.shapes=V(residGraph2)$shape,
main = "Centralité d'intermédiarité")
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
graphCol2 = pal(fine)[as.numeric(degree(residGraph2),breaks = fine)]
graphCol3 = pal(fine)[as.numeric(closeness(residGraph2),breaks = fine)]
set.seed(1)
{plot(residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.color=graphCol2,
vertex.label="",
main = "centralité de degré des noeuds")
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
set.seed(1)
{plot(residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.color=graphCol3,
vertex.label="",
main = "centralité de proximité")
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
#Les ordres présents dans :
Grp_virus%>%
group_by(order)%>%
distinct(order)
#Les familles (ce que l'on va choisir)
famillePresents <- Grp_virus%>%
group_by(family)%>%
distinct(family)
#Les genres
Grp_virus%>%
group_by(genus)%>%
distinct(genus)
V(residGraph2)$famille <- as.character(Grp_virus$family[match(V(residGraph2)$name,Grp_virus$Locus)])
colorsFamille <- c("blue","tomato", "gold", "dark green")
matriceDeCouleur <- matrix(colorsFamille, nrow=1, ncol=4)
colnames(matriceDeCouleur) <- famillePresents$family
for (FamCourant in V(residGraph2)$famille) {
V(residGraph2)[V(residGraph2)$famille==FamCourant]$color <- matriceDeCouleur[,FamCourant]
}
set.seed(1)
{plot(residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.shapes=V(residGraph2)$shape,
vertex.color=V(residGraph2)$color,
main = "Répartition des virus selon leur appartenance aux Familles des hôtes")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
components(residGraph2)
CL <- cluster_louvain(residGraph2)
set.seed(1)
{plot(CL, residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.color=V(residGraph2)$color,
main = "Répartition des communautés de virus selon l'algorithme de Louvain")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
ceb <- cluster_edge_betweenness(residGraph2, directed = F)
set.seed(1)
{plot(ceb, residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.color=V(residGraph2)$color,
main = "Répartition des communautés de virus selon l'algorithme de N-G")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
#nombre de communautés détectées par les deux algorithmes
length(CL)
length(ceb)
#taille de ces communautés
sizes(CL)
sizes(ceb)
modularity(CL)
modularity(ceb)
#chevauchement de ces communautés
compare(comm1 = CL, comm2 = ceb)
set.seed(1)
{plot(CL, residGraph2,
layout=l,
edge.color="grey",
#edge.width=Poids_Liens,
vertex.label="",
vertex.color=membership(CL),
main = "Représentaion du réseau de Famille des hôtes")
legend(x=-1.5, y=-1.1, unique(V(residGraph2)$famille), pch=21,col="#777777", pt.bg=colorsFamille, pt.cex=2, cex=0.8, bty="n", ncol=2)
legend("topleft", legend=c("prophage","non prophage","undef"), pch=c(1,0,2), bty="n")}
